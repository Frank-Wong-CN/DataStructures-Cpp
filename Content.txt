Chapter 2 Intro to Algorithms and Big-O notation
	O(n) = Upper Bound of a function, if f(n) = O(g(n)), then limit of f(n) / g(n) as n goes to infinity is 0
		Big-O notation: g(n) grows faster than f(n)
	o(n) = Lower Bound of a function, if f(n) = o(g(n)), then limit of f(n) / g(n) as n goes to infinity is infinity
		Little-O notation: f(n) grows faster than g(n)
	Θ(n) = Approximation of a function, if f(n) = Θ(g(n)), then limit of f(n) / g(n) as n goes to infinity equals to a constant number
		Big-Theta notation: f(n) grows as fast as g(n)
	As to how to calculate time complexity
		Each line of basic instruction counts as 1, regardless of disk IO time or OS related time
		A N-loop that contains k lines of basic instructions has a time complexity of kN
		A M-loop nested in a N-loop with k lines of basic instructions has a time complexity of kMN
		When calculating Big-O:
			Add all time together
			Keep ONLY the highest order of the polynomial, discard the rest
			Discard the constant factor
		For example, O(3N^2 + 9N + 91020) = O(N^2), O(100000000) = O(1)

Chapter 3 Linked List, Stack, Queue
	Linked List ADT
		struct Node { Element X, Node *Next }
		Interface: Insert, Delete, Length, Find
	Stack ADT
		FILO, Interface: Push, Pop, Peek (Top)
	Queue ADT
		FIFO, Interface: Enqueue, Dequeue, Peek (Front)

Chapter 4 Tree
	N-ary Tree (General Tree) ADT
		struct Node { Element X, Node *Child, Node *Sibling } *Child-Sibling Representation
		struct Node { Element X, Node *Children[] } *Children Representation
		Interface: AddChild, AddSibling, Remove, Traverse (PreOrder, PostOrder)
	Binary Tree ADT
		Interface: AddLeftChild, AddRightChild, Remove, Traverse (PreOrder, InOrder, PostOrder), ConvertToForest (ForestToBinary, BinaryToForest)
	Binary Search Tree ADT
		Interface: Add, Remove, Find, Traverse (PreOrder, InOrder, PostOrder)
	AVL Tree ADT
		Interface: Add, Remove, Find, Traverse (PreOrder, InOrder, PostOrder)
		Utility: LeftRotate, RightRotate (Or LL-Rotate, LR-Rotate, RR-Rotate, RL-Rotate)
	B-Tree ADT
		Interface: Add, Remove, Find, Traverse (InOrder)
		Utility: Split
	B+Tree ADT (X)
		Interface: Add, Remove, Find, Traverse (InOrder)
		Utility: Split
	Red Black Tree ADT (X)
	Splay Tree ADT (X)

Chapter 5 Hashing

Chapter 6 Heap and Priority Queue
	
Chapter 7 String and Multi-Dimensional Array
	String
		Sequence String
		Linked String
		Combined String (DONE)
			{ StringData { StringPart (PartSize + 1), Head } , Next }
						   └───────────┬───────────┘
							   char[PartSize + 1]
						 └────────────────┬────────────────┘
									   Element
			Interface: Length, Copy, Insert, Concat, Compare, BFPatternMatch, KMPPatternMatch
			Utility: Shift, Index2Part, Split, KMPTableBuild (IMPORTANT!)
		KMP Algorithm
			BFPatternMatch O(mn) where m = length of string, n = length of pattern
			KMPPatternMatch O(m+n) where m = length of string, n = length of pattern
			KMPTable is built around "Longest Proper Prefix-that-is-also-a-Suffix Length" (or just LPS, Longest Prefix Suffix):
				while (P < S.Length):
					if (S[P] == S[L])
						T[P++] = ++L
					else if (L == 0)
						T[P++] = 0
					else
						L = T[L - 1]
			KMP Algorithm:
				Acquire LPS table (NextTable) first.
				If match, increment both CurMainPointer and CurPatternPointer.
				Otherwise, repeat match the same position of MainString with CurPatternPointer = NextTable[CurPatternPointer - 1] until CurPatternPointer reaches 0.
				Just increment CurMainPointer by 1 if no match and CurPatternPointer reached 0.
	MD Array
		MD Linked List
		Cross-Linked List
		Matrix
		Optimized Storage for Special Matrices
			Upper Triangle
			Lower Triangle
			Symmetric
			3-Strip
			Sparse
				Use Tuple - (X, Y, Content)
				Use Cross-Linked List - Better mathematical usage
		Tuple

Chapter 8 Graph
	DS:
		AdjacencyList
		AdjacencyMatrix
		Cross-Linked List

Chapter 9 Sorting Algorithms

Chapter 10 Indexing Algorithms

Chapter 11 Advanced Structures and Designing Algorithms

Other worth noting:
	1. D(Str, Args): Debug output
		Use regex D\("(.+?)"(, (.+?))?()\) to match all debug output macros
		Subsititute with D\("[{}] \1", __FUNCTION__\2\) to output function name as well
